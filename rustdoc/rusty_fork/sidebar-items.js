initSidebarItems({"enum":[["Error","Enum for errors produced by the rusty-fork crate."]],"fn":[["fork","Simulate a process fork."]],"macro":[["rusty_fork_id","Produce a hashable identifier unique to the particular macro invocation which is stable across processes of the same executable."],["rusty_fork_test","Run Rust tests in subprocesses."],["rusty_fork_test_name","Given the unqualified name of a `#[test]` function, produce a `&'static str` corresponding to the name of the test as filtered by the standard test harness."]],"mod":[["fork_test","Support code for the `rusty_fork_test!` macro and similar."]],"struct":[["ChildWrapper","Wraps a `std::process::Child` to coordinate state between `std` and `wait_timeout`."],["ExitStatusWrapper","Wraps `std::process::ExitStatus`. Historically, this was due to the `wait_timeout` crate having its own `ExitStatus` type."],["RustyForkId","The type of the value produced by `rusty_fork_id!`."]],"type":[["Result","General `Result` type for rusty-fork."]]});