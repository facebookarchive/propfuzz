initSidebarItems({"enum":[["TestCaseError","Errors which can be returned from test cases to indicate non-successful completion."]],"fn":[["any","Generates a [`Strategy`] producing [`Arbitrary`][trait Arbitrary] values of `A`. Unlike [`arbitrary`][fn arbitrary], it should be used for being explicit on what `A` is. For clarity, this may be a good idea."],["any_with","Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the given configuration arguments passed in `args`. Unlike [`arbitrary_with`], it should be used for being explicit on what `A` is. For clarity, this may be a good idea."]],"mod":[["prop","Re-exports the entire public API of proptest so that an import of `prelude` allows simply writing, for example, `prop::num::i32::ANY` rather than `proptest::num::i32::ANY` plus a separate `use proptest;`."]],"struct":[["BoxedStrategy","A boxed `Strategy` trait object as produced by `Strategy::boxed()`."],["Just","A `Strategy` which always produces a single value value and never simplifies."],["ProptestConfig","Configuration for how a proptest test should be run."],["SBoxedStrategy","A boxed `Strategy` trait object which is also `Sync` and `Send`, as produced by `Strategy::sboxed()`."]],"trait":[["Arbitrary","Arbitrary determines a canonical [`Strategy`] for the implementing type."],["Rng","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods."],["RngCore","The core of a random number generator."],["Strategy","A strategy for producing arbitrary values of a given type."]]});